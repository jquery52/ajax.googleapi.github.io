$displayList: (hide: none,
    d-none: none,
    show: block,
    d-flex: flex,
    flex: flex,
    d-table-cell: table-cell,
    inline: inline,
    d-table-row: table-row,
    d-inline-block: inline-block,
    d-inline-flex: inline-flex,
    d-inline-flexbox: inline-flexbox,
    d-initial: initial,
    d-inherit: inherit,
    d-inline-table: inline-table,
    d-grid: grid,
    d-block: block,
);

@each $plugins,
$property in $displayList {
    .#{$plugins} {
        display: $property;
    }
}

$fontFamily: (text-poppins: poppins,
    text-rubik: rubik,
    text-ubuntu: ubuntu,
    text-monospace: monospace,
    text-fantasy: fantasy,
    text-serif: serif,
    text-sans-serif: sans-serif,
);

@each $plugins,
$value in $fontFamily {
    .#{$plugins} {
        font-family: $value!important;
    }
}


$position: (position-static: static,
    position-relative: relative,
    position-fixed: fixed,
    position-absolute: absolute,
    position-sticky: sticky,
);

@each $plugins,
$value in $position {
    .#{$plugins} {
        position: $value;
    }
}

.text-truncate {
    text-decoration: transparent;
}


$text: (text-lowercase: (text-transform: lowercase,
    ),
    text-uppercase: (text-transform: uppercase,
    ),
    text-capitalize: (text-transform: capitalize,
    ),
    text-italic: (font-style: italic,
    ),
    text-underline: (text-decoration: underline,
    ),
);

@each $plugins,
$names in $text {
    .#{$plugins} {

        @each $property,
        $values in $names {
            #{$property}: $values;
        }
    }
}

.text-break {
    flex-wrap: wrap;
    word-wrap: break-word;
    word-break: break-all;
    overflow-wrap: break-word;
}


$font: (font-weight-bold: (font-weight: bold,
    ),
    font-weight-bolder: (font-weight: bolder,
    ),
    font-weight-normal: (font-weight: normal,
    ),
    font-weight-light: (font-weight: light,
    ),
    font-weight-lighter: (font-weight: lighter,
    ),
    font-italic: (font-style: italic,
    ),
    text-decoration-none: (text-decoration: none, 
    ),
);

@each $plugins,
$names in $font {
    .#{$plugins} {

        @each $property,
        $values in $names {
            #{$property}: $values!important;
        }
    }
}

.text-system-ui {
    font-family: -apple-system,
    BlinkMacSystemFont,
    'Segoe UI',
    Roboto,
    Oxygen,
    Ubuntu,
    Cantarell,
    'Open Sans',
    'Helvetica Neue',
    sans-serif!important;
}
.text-arial {
    font-family: Arial,
    Helvetica,
    sans-serif!important;
}

.text-vardana {
    font-family: Verdana,
    Geneva,
    Tahoma,
    sans-serif!important;
}

.text-impact {
    font-family: Impact,
    Haettenschweiler,
    'Arial Narrow Bold',
    sans-serif!important;
}

.text-gill {
    font-family: 'Gill Sans',
    'Gill Sans MT',
    Calibri,
    'Trebuchet MS',
    sans-serif!important;
}

.text-lucida {
    font-family: 'Lucida Sans',
    'Lucida Sans Regular',
    'Lucida Grande',
    'Lucida Sans Unicode',
    Geneva,
    Verdana,
    sans-serif!important;
}

.text-trebuchet {
    font-family:'Trebuchet MS',
    'Lucida Sans Unicode',
    'Lucida Grande',
    'Lucida Sans',
    Arial,
    sans-serif!important;
}

.text-georgia {
    font-family: Georgia,
    'Times New Roman',
    Times,
    serif!important;
}

.text-courier {
    font-family: 'Courier New',
    Courier,
    monospace!important;
}

.text-times {
    font-family: 'Times New Roman',
    Times,
    serif!important;
}

.text-franklin {
    font-family: 'Franklin Gothic Medium',
    'Arial Narrow',
    Arial,
    sans-serif!important;
}


$bg-colors: (bg-primary: #007bff,
    bg-secondary: #6c757d,
    bg-success: #28a745,
    bg-danger: #dc3545,
    bg-warning: #ffc107,
    bg-light: #f8f9fa,
    bg-dark: #343a40,
    bg-white: #fff,
    bg-transparent: transparent,
);

@each $plugins,
$colors in $bg-colors {
    .#{$plugins} {
        background: $colors !important;
        background-color: $colors !important;
    }
}

$colors: (text-primary: #007bff,
    text-secondary: #6c757d,
    text-success: #28a745,
    text-danger: #dc3545,
    text-warning: #ffc107,
    text-info: #17a2b8,
    text-light: #f8f9fa,
    text-dark: #343a40,
    text-body: #212529,
    text-muted: #6c757d,
    text-white: #fff,
    text-black-50: rgba(0, 0, 0, 0.5),
    text-white-50: rgba(255, 255, 255, 0.5),
);

@each $plugins,
$colors in $colors {
    .#{$plugins} {
        color: $colors !important;
    }
}

.overflow-auto {
    overflow: auto!important;
}

.overflow-hidden {
    overflow: hidden!important;
}

.float-left {
    float: left!important;
}

.float-right {
    float: right!important;
}

.float-none {
    float: none!important;
}

.user-select-none {
    user-select: none!important;
}

.visible {
    visibility: visible!important;
}

.invisible {
    visibility: hidden !important;
}

.justify-arround {
    justify-content: space-around;
}

.justify-between {
    justify-content: space-between;
}

.justify-evenly {
    justify-content: space-evenly;
}

.justify-start {
    justify-content: start;
}

.justify-end {
    justify-content: end;
}

.fxy {
    align-items: center;
    justify-content: center;
}

.fy {
    align-items: center;
}

.fx {
    justify-content: center;
}

$transform: (trans-x-, trans-y-, trans-xn-, trans-yn-);

@each $plugins in $transform {
    @for $counter from 1 through 100 {
        @if $plugins==trans-x- {
            .#{$plugins}#{$counter} {
                transform: translateX($counter + 0%);
            }

            .#{$plugins}#{$counter}px {
                transform: translateX($counter + 0px);
            }
        }

        @if $plugins==trans-y- {
            .#{$plugins}#{$counter} {
                transform: translateY($counter + 0%);
            }

            .#{$plugins}#{$counter}px {
                transform: translateY($counter + 0px);
            }
        }

        @if $plugins==trans-xn- {
            .#{$plugins}#{$counter} {
                transform: translateX(-$counter + 0%);
            }

            .#{$plugins}#{$counter}px {
                transform: translateX(-$counter + 0px);
            }
        }

        @if $plugins==trans-yn- {
            .#{$plugins}#{$counter} {
                transform: translateY(-$counter + 0%);
            }

            .#{$plugins}#{$counter}px {
                transform: translateY(-$counter + 0px);
            }
        }
    }
}


.trans-xyn {
    transform: translate(-50%, -50%);
}

.trans-xy {
    transform: translate(50%, 50%);
}